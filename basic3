아스키코드
- 이진수로 이루어진 전자신호를 사람이 인식할 수 있는 문자로 저장을 했어야 해쓴ㄴ데, 미국사람들이 문자로 표현하는 아스키코드를 만들었다.

확장(extended) ASCI
-> 기존 아스키코드에 1비트를 추가하여 256개의 문자를 표현

유니코드
-> 아스키코드는 1바이트로 1개의 문자를 표현하는 데는 영어로 한정
-> 이 한계를 극복하기 위해 유니코드가 탄생
-> 2byte로 전 세계의 모든 문자를 표현


Overflow & Underflow
- overflow : 데이터 타입이 저장할 수 있는 값의 범위를 초과한 경우 가장 작은 숫자로 돌아가서 다시 올라가게 된다.
- underflow : 데이터 타입이 저장할 수 있는 값의 범위보다 작은 값을 저장한 경우 가장 큰 숫자로 돌아가서 다시 내려가게 된다.


변수의 타입(기본자료형)
* 기본형(primitive type) -> 실제 값을 저장
8개 (boolean, char, byte, short, int, long, float, double)

정수형 -> byte, short, int, long
문자형 -> char(문자를 저장하기 위한 타입이지만, 실제값은 정수가 저장)
실수형 -> float, double
논리형 -> boolean


기본타입 (boolean)
- 논리자료형 -> 참 또는 거짓
- boolean (1byte, 입출력 범위 : true / false)

ex) boolean bool1 = true;
ex) boolean bool2 = false;

- 자바에서는 boolean을 표현하기 위해 ==, <, <=, >, >=, &&, ||, ! 같은 논리연산자(boolean operator)들을 사용한다.


기본타입 (정수)
정수타입    사용메모리       자리수
- byte      1byte          -2^7 ~ (2^7 - 1)     -128~127
- short     2byte          -2^15 ~ (2^15 -1)    -32768 ~ 32767
- int       4byte          -2^31 ~ (2^31 - 1)   -21억 ~ 21억
- long      8byte          -2^63 ~ (2^63 - 1)
문자타입
- char      2byte           0 ~ (2^16 - 1)      0 ~ 65535(유니코드)       // 유일하게 음수가 없다

- 모든 정수는 기본적으로 int형으로 나타낸다.
- char는 실제로는 문자의 코드인 숫자, 정수가 저장된다.
- long형을 표현할 때에는 뒤에 소문자l이나 대문자 L을 붙여준다.

byte / short
- byte형 정수와 short형 정수를 위한 접미사는 있을까?

- 없다. 자바에서 정수의 연산을 할때 기본적으로 int형으로 연산을 하기 때문이다.
그 이유는 int형 끼리 연산이 가장 속도가 빠르기 때문이다. 그렇기 때문에 정수를 
굳이 byte형과 short형으로 나타낼 이유가 없다. 또 자바에서는 int형 값을 byte나 
short형 변수에 저장하는 것을 허용하고 있다.


기본타입(실수)
float       4byte       정밀도 (약 소수점 7자리)       (1.4 * 10^-45) ~ (3.4 * 10^38)
double      8byte       정밀도 (약 소수점 15자리)      

- 메모리 사용은 각각 정수 타입 int, long과 같지만, 내부적으로 다른 방식으로 저장되어 더 큰 범위의 값을 저장할 수 있다.
- 자바의 실수 타입의 기본 처리는 double타입이므로, float 타입에 값을 저장하려면 실수 값 뒤에 f또는 F를 붙여야 한다.
